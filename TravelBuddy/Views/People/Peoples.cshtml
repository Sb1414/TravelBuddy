@model List<TravelBuddy.Models.UserListViewModel>
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery antiforgery
@Html.AntiForgeryToken()
<meta name="RequestVerificationToken" content="@antiforgery.GetAndStoreTokens(ViewContext.HttpContext).RequestToken" />
@{
    ViewData["Title"] = "Люди";
}

<h2>Люди</h2>

<div class="mb-4">
    <label>Фильтр:</label>
    <select id="filterBy" class="form-control d-inline-block w-25">
        <option value="">Выберите фильтр</option>
        <option value="FullName">ФИО</option>
        <option value="Age">Возраст</option>
        <option value="City">Город</option>
    </select>
    <select id="filterValue" class="form-control d-inline-block w-25 ml-2">
        <option value="">Выберите значение</option>
    </select>
    <button onclick="applyFilter()" class="btn btn-primary ml-2">Применить</button>
    <button onclick="resetFilter()" class="btn btn-secondary ml-2">Сбросить фильтр</button>
</div>

<div id="people-list">
    @Html.Partial("_PeopleList", Model)
</div>

@section Scripts {
    <script>
        document.getElementById("filterBy").addEventListener("change", function () {
            const filterBy = this.value;
            const filterValueSelect = document.getElementById("filterValue");

            if (filterBy) {
                fetch(`/People/GetFilterValues?filterBy=${filterBy}`)
                    .then(response => response.json())
                    .then(data => {
                        filterValueSelect.innerHTML = '<option value="">Выберите значение</option>';
                        data.forEach(value => {
                            filterValueSelect.innerHTML += `<option value="${value}">${value}</option>`;
                        });
                        filterValueSelect.disabled = false;
                    });
            } else {
                filterValueSelect.innerHTML = '<option value="">Выберите значение</option>';
                filterValueSelect.disabled = true;
            }
        });

        // применение фильтра
        function applyFilter() {
            const filterBy = document.getElementById("filterBy").value;
            const filterValue = document.getElementById("filterValue").value;

            fetch(`/People/Peoples?filterBy=${filterBy}&filterValue=${filterValue}`, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                document.getElementById("people-list").innerHTML = html;
            });
        }

        // сброс фильтра
        function resetFilter() {
            document.getElementById("filterBy").value = "";
            document.getElementById("filterValue").innerHTML = '<option value="">Выберите значение</option>';
            document.getElementById("filterValue").disabled = true;

            fetch(`/People/Peoples`, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                document.getElementById("people-list").innerHTML = html;
            });
        }
        
        function showMessageForm(recipientId) {
            const messageFormHtml = `
                <div class="message-form-overlay">
                    <div class="message-form-container">
                        <h4>Написать сообщение</h4>
                        <textarea id="overlayMessageContent" class="form-control" placeholder="Введите ваше сообщение"></textarea>
                        <button class="btn btn-primary mt-2" onclick="sendMessage('${recipientId}')">Отправить</button>
                        <button class="btn btn-secondary mt-2" onclick="closeMessageForm()">Отмена</button>
                    </div>
                </div>
            `;
            document.body.insertAdjacentHTML('beforeend', messageFormHtml);
        }

        function closeMessageForm() {
            const overlay = document.querySelector('.message-form-overlay');
            if (overlay) overlay.remove();
        }

        function sendMessage(recipientId) {
            const content = document.getElementById('overlayMessageContent').value.trim();
        
            // Проверка значения контента
            console.log("Content: ", content);
        
            if (!content) {
                alert('Сообщение не может быть пустым');
                return;
            }
        
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        
            const formData = new FormData();
            formData.append('recipientId', recipientId);
            formData.append('content', content);
            formData.append('__RequestVerificationToken', token);
        
            fetch('/People/SendMessage', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (response.ok) {
                    alert('Сообщение отправлено');
                } else {
                    alert('Ошибка при отправке сообщения');
                }
                closeMessageForm();
            })
            .catch(error => {
                console.error('Ошибка:', error);
                alert('Ошибка при отправке сообщения');
                closeMessageForm();
            });
        }
    </script>
    <style>
        .message-form-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }
        .message-form-container {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            max-width: 400px;
            width: 100%;
        }
    </style>
}
