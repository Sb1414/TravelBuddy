@using Newtonsoft.Json
@model TravelBuddy.Models.UserRoute
@{
    ViewData["Title"] = "–î–µ—Ç–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç–∞";
}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
          crossorigin="" />

<h2>–î–µ—Ç–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç–∞</h2>

<div class="card p-4">
    <h4>@Model.RouteName</h4>
    <div id="map" style="height: 400px; width: 100%; margin-top: 20px;"></div>

    @if (Model.RouteStops.Any())
    {
        <p><strong>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</strong> @Model.RouteStops.First().DestinationCity</p>
        <p><strong>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</strong> @Model.RouteStops.Last().DestinationCity</p>
        <h5>–û—Å—Ç–∞–Ω–æ–≤–∫–∏:</h5>
        <ul>
            @for (int i = 0; i < Model.RouteStops.Count; i++)
            {
                var stop = Model.RouteStops.ElementAt(i);
                <li>
                    <strong>–ì–æ—Ä–æ–¥:</strong> @stop.DestinationCity <br />
                    
                    @if (i != Model.RouteStops.Count - 1) 
                    {
                        <strong>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:</strong> @stop.Transportation <br />
                        <strong>–í—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è:</strong> @stop.Duration @stop.DurationType
                    }
                </li>
            }
        </ul>
    }
    else
    {
        <p>–ú–∞—Ä—à—Ä—É—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ—Ä–æ–¥–æ–≤</p>
    }

    <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –º–∞—Ä—à—Ä—É—Ç–∞ -->
    <a asp-controller="People" asp-action="Profile" asp-route-id="@Model.UserId" class="text-decoration-none">
        <div class="d-flex align-items-center mt-4">
            <img src="@Model.ApplicationUser.ProfilePictureUrl" class="rounded-circle" alt="–§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" style="width: 50px; height: 50px; margin-right: 10px;">
            <div>
                <p class="mb-0"><strong>@Model.ApplicationUser.FullName</strong></p>
                <small>–°–æ–∑–¥–∞—Ç–µ–ª—å –º–∞—Ä—à—Ä—É—Ç–∞</small>
            </div>
        </div>
    </a>
</div>

        
@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
            integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
            crossorigin=""></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet-polylinedecorator/1.6.0/leaflet.polylineDecorator.min.js"></script>

     <script>
            const map = L.map('map').setView([55.751244, 37.618423], 5); // –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã (–ú–æ—Å–∫–≤–∞)
    
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);
    
            // –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            const icons = {
                "–°–∞–º–æ–ª–µ—Ç": '‚úàÔ∏è',
                "–ú–∞—à–∏–Ω–∞": 'üöó',
                "–ü–æ–µ–∑–¥": 'üöÜ'
            };
    
            // –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
            const stops = @Html.Raw(JsonConvert.SerializeObject(Model.RouteStops.OrderBy(stop => stop.Id).Select(stop => new {
                DestinationCity = stop.DestinationCity,
                Transportation = stop.Transportation,
                Duration = stop.Duration,
                DurationType = stop.DurationType,
                Latitude = stop.Latitude,
                Longitude = stop.Longitude
            })));
    
            const routeCoordinates = stops.map(stop => [stop.Latitude, stop.Longitude]);
    
            stops.forEach((stop, index) => {
                if (index > 0) {
                    const previousStop = stops[index - 1];
                    const routeLine = L.polyline([[previousStop.Latitude, previousStop.Longitude], [stop.Latitude, stop.Longitude]], {
                        color: 'blue',
                        weight: 4,
                        opacity: 0.7
                    }).addTo(map);
    
                    // –¥–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω—É –ª–∏–Ω–∏–∏
                    const iconHtml = icons[stop.Transportation] || 'üöç'; // –∏–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    const iconMarker = L.divIcon({
                        className: 'transport-icon',
                        html: iconHtml,
                        iconSize: [20, 20]
                    });
    
                    // –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –Ω–∞ –ª–∏–Ω–∏–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
                    const middleLat = (previousStop.Latitude + stop.Latitude) / 2;
                    const middleLng = (previousStop.Longitude + stop.Longitude) / 2;
                    L.marker([middleLat, middleLng], { icon: iconMarker }).addTo(map);
                }
            });
            
            stops.forEach(stop => {
                const marker = L.marker([stop.Latitude, stop.Longitude]).addTo(map)
                    .bindPopup(`<b>${stop.DestinationCity}</b><br>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${stop.Transportation}<br>–í—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è: ${stop.Duration} ${stop.DurationType}`);
            });
    
            // –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ—á–µ–∫
            const bounds = L.latLngBounds(routeCoordinates);
            map.fitBounds(bounds);
        </script>
    
        <style>
            .transport-icon {
                font-size: 18px;
                text-align: center;
            }
        </style>
}
        