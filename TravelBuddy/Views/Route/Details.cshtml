@using Newtonsoft.Json
@model TravelBuddy.Models.UserRoute

@{
    ViewData["Title"] = "–î–µ—Ç–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç–∞";

    // –°–æ–∑–¥–∞–µ–º —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
    var orderedPoints = new List<dynamic>();

    if (Model.RouteStops.Any())
    {
        var stopsOrdered = Model.RouteStops.OrderBy(stop => stop.Id).ToList();

        foreach (var stop in stopsOrdered)
        {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!string.IsNullOrEmpty(stop.TransportationFromTitle))
            {
                orderedPoints.Add(new {
                    Name = "–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: " + stop.TransportationFromTitle,
                    Latitude = stop.TransportationFromLatitude,
                    Longitude = stop.TransportationFromLongitude,
                    Type = "stationDeparture"
                });
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É —Å—Ç–∞–Ω—Ü–∏–∏ –ø—Ä–∏–±—ã—Ç–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!string.IsNullOrEmpty(stop.TransportationToTitle))
            {
                orderedPoints.Add(new {
                    Name = "–°—Ç–∞–Ω—Ü–∏—è –ø—Ä–∏–±—ã—Ç–∏—è: " + stop.TransportationToTitle,
                    Latitude = stop.TransportationToLatitude,
                    Longitude = stop.TransportationToLongitude,
                    Type = "stationArrival"
                });
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –æ—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!string.IsNullOrEmpty(stop.HotelName))
            {
                orderedPoints.Add(new {
                    Name = "–û—Ç–µ–ª—å: " + stop.HotelName,
                    Latitude = stop.HotelLatitude,
                    Longitude = stop.HotelLongitude,
                    Type = "hotel"
                });
            }
        }
    }
}

<!-- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π Leaflet -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
      crossorigin="" />

<h2>–î–µ—Ç–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç–∞</h2>

<div class="card p-4">
    <h4>@Model.RouteName</h4>
    <div id="map" style="height: 400px; width: 100%; margin-top: 20px;"></div>

    @if (orderedPoints.Any())
    {
        <h5>–ú–∞—Ä—à—Ä—É—Ç:</h5>
        <ol>
            @foreach (var point in orderedPoints)
            {
                <li>
                    <strong>@point.Name</strong>
                    @if (point.Type == "stationDeparture" || point.Type == "stationArrival")
                    {
                        <br />
                        <strong>–¢–∏–ø —Ç–æ—á–∫–∏:</strong> // –°—Ç–∞–Ω—Ü–∏—è
                    }
                    else if (point.Type == "hotel")
                    {
                        <br />
                        <strong>–¢–∏–ø —Ç–æ—á–∫–∏:</strong> // –û—Ç–µ–ª—å
                    }
                </li>
            }
        </ol>
    }
    else
    {
        <p>–ú–∞—Ä—à—Ä—É—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–µ–∫</p>
    }

    <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –º–∞—Ä—à—Ä—É—Ç–∞ -->
    <a asp-controller="People" asp-action="Profile" asp-route-id="@Model.UserId" class="text-decoration-none">
        <div class="d-flex align-items-center mt-4">
            <img src="@Model.ApplicationUser.ProfilePictureUrl" class="rounded-circle" alt="–§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" style="width: 50px; height: 50px; margin-right: 10px;">
            <div>
                <p class="mb-0"><strong>@Model.ApplicationUser.FullName</strong></p>
                <small>–°–æ–∑–¥–∞—Ç–µ–ª—å –º–∞—Ä—à—Ä—É—Ç–∞</small>
            </div>
        </div>
    </a>
</div>

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
            integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
            crossorigin=""></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet-polylinedecorator/1.6.0/leaflet.polylineDecorator.min.js"></script>

    <script>
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
        const map = L.map('map').setView([55.751244, 37.618423], 5); // –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã (–ú–æ—Å–∫–≤–∞)

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ—á–µ–∫
        const icons = {
            "stationDeparture": 'üöâ',
            "stationArrival": 'üöâ',
            "hotel": 'üè®',
            "city": 'üèôÔ∏è'
        };

        // –î–∞–Ω–Ω—ã–µ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
        const orderedPoints = @Html.Raw(JsonConvert.SerializeObject(orderedPoints));

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ—á–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        const validPoints = orderedPoints.filter(point => point.Latitude !== null && point.Longitude !== null);

        const routeCoordinates = validPoints.map(point => [point.Latitude, point.Longitude]);

        // –†–∏—Å—É–µ–º –ø–æ–ª–∏–ª–∏–Ω–∏–∏ –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
        for (let i = 0; i < routeCoordinates.length - 1; i++) {
            const routeLine = L.polyline([routeCoordinates[i], routeCoordinates[i + 1]], {
                color: 'blue',
                weight: 4,
                opacity: 0.7
            }).addTo(map);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏
        validPoints.forEach((point, index) => {
            let iconHtml = icons[point.Type] || 'üìç'; // –ò–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            const iconMarker = L.divIcon({
                className: 'custom-icon',
                html: iconHtml,
                iconSize: [20, 20]
            });

            const marker = L.marker([point.Latitude, point.Longitude], { icon: iconMarker }).addTo(map)
                .bindPopup(`<b>${point.Name}</b>`);
        });

        // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ—á–µ–∫
        if (routeCoordinates.length > 0) {
            const bounds = L.latLngBounds(routeCoordinates);
            map.fitBounds(bounds);
        }
    </script>

    <style>
        .custom-icon {
            font-size: 18px;
            text-align: center;
        }
    </style>
}
