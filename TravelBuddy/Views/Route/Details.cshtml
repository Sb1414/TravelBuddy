@using Newtonsoft.Json
@model TravelBuddy.Models.UserRoute

@{
    ViewData["Title"] = "Детали маршрута";

    // Создаем упорядоченный список точек маршрута для карты
    var orderedPoints = new List<dynamic>();

    if (Model.RouteStops.Any())
    {
        var stopsOrdered = Model.RouteStops.OrderBy(stop => stop.Id).ToList();

        foreach (var stop in stopsOrdered)
        {
            // Добавляем точку станции отправления, если она существует
            if (!string.IsNullOrEmpty(stop.TransportationFromTitle))
            {
                orderedPoints.Add(new {
                    Name = "Станция отправления: " + stop.TransportationFromTitle,
                    Latitude = stop.TransportationFromLatitude,
                    Longitude = stop.TransportationFromLongitude,
                    Type = "stationDeparture"
                });
            }

            // Добавляем точку станции прибытия, если она существует
            if (!string.IsNullOrEmpty(stop.TransportationToTitle))
            {
                orderedPoints.Add(new {
                    Name = "Станция прибытия: " + stop.TransportationToTitle,
                    Latitude = stop.TransportationToLatitude,
                    Longitude = stop.TransportationToLongitude,
                    Type = "stationArrival"
                });
            }

            // Добавляем точку отеля, если она существует
            if (!string.IsNullOrEmpty(stop.HotelName))
            {
                orderedPoints.Add(new {
                    Name = "Отель: " + stop.HotelName,
                    Latitude = stop.HotelLatitude,
                    Longitude = stop.HotelLongitude,
                    Type = "hotel"
                });
            }
        }
    }

    var departureCity = Model.RouteStops.OrderBy(stop => stop.Id).FirstOrDefault()?.DestinationCity ?? "Неизвестно";

    var totalTransportPrice = Model.RouteStops.Sum(stop => 
        decimal.TryParse(stop.TransportationPrice, out var transportPrice) ? transportPrice : 0);

    var totalHotelPrice = Model.RouteStops.Sum(stop => 
        decimal.TryParse(stop.HotelPrice, out var hotelPrice) ? hotelPrice : 0);
}

<h2>Детали маршрута</h2>

<div class="card p-4">
    <h4>@Model.RouteName</h4>
    <div id="map" style="height: 400px; width: 100%; margin-top: 20px;"></div>

    <!-- Город отправления -->
    <h5 class="mt-4">Отправление из: @departureCity</h5>

    <!-- Таблица с данными о точках маршрута -->
    @if (Model.RouteStops.Count > 1) // Убедимся, что есть точки кроме первой
    {
        <h5 class="mt-4">Детали точек маршрута</h5>
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Город</th>
                    <th>Перевозчик</th>
                    <th>Время отправления</th>
                    <th>Время прибытия</th>
                    <th>Отправление от</th>
                    <th>Прибытие в</th>
                    <th>Стоимость транспорта</th>
                    <th>Отель</th>
                    <th>Дата выезда из отеля</th>
                    <th>Стоимость отеля</th>
                </tr>
            </thead>
            <tbody>
                @{
                    // Пропускаем первую точку (город отправления)
                    var stops = Model.RouteStops.OrderBy(stop => stop.Id).Skip(1);
                    int rowNumber = 1;
                    foreach(var stop in stops)
                    {
                        <tr>
                            <td>@rowNumber</td>
                            <td>@stop.DestinationCity</td>
                            <td>@stop.TransportationCarrier</td>
                            <td>@(stop.TransportationDepartureTime.HasValue ? stop.TransportationDepartureTime.Value.ToString("dd.MM.yyyy HH:mm") : "—")</td>
                            <td>@(stop.TransportationArrivalTime.HasValue ? stop.TransportationArrivalTime.Value.ToString("dd.MM.yyyy HH:mm") : "—")</td>
                            <td>@stop.TransportationFromTitle</td>
                            <td>@stop.TransportationToTitle</td>
                            <td>@stop.TransportationPrice</td>
                            <td>@stop.HotelName</td>
                            <td>@(stop.HotelCheckOutDate.HasValue ? stop.HotelCheckOutDate.Value.ToString("dd.MM.yyyy") : "—")</td>
                            <td>@stop.HotelPrice</td>
                        </tr>
                        rowNumber++;
                    }
                }
            </tbody>
        </table>
    }

    <!-- Общая сумма -->
    <div class="mt-3">
        <h5>Общая стоимость:</h5>
        <p><strong>Транспорт:</strong> @totalTransportPrice ₽</p>
        <p><strong>Отели:</strong> @totalHotelPrice ₽</p>
        <p><strong>Итого:</strong> @(totalTransportPrice + totalHotelPrice) ₽</p>
    </div>

    <!-- Информация о создателе маршрута -->
    <a asp-controller="People" asp-action="Profile" asp-route-id="@Model.UserId" class="text-decoration-none">
        <div class="d-flex align-items-center mt-4">
            <img src="@Model.ApplicationUser.ProfilePictureUrl" class="rounded-circle" alt="Фото пользователя" style="width: 50px; height: 50px; margin-right: 10px;">
            <div>
                <p class="mb-0"><strong>@Model.ApplicationUser.FullName</strong></p>
                <small>Создатель маршрута</small>
            </div>
        </div>
    </a>
</div>

@section Scripts {
    <!-- Подключение Яндекс.Карт API -->
    <script src="https://api-maps.yandex.ru/2.1/?lang=ru_RU" type="text/javascript"></script>

    <script>
        ymaps.ready(init);

        function init() {
            // Данные упорядоченных точек маршрута
            const orderedPoints = @Html.Raw(JsonConvert.SerializeObject(orderedPoints));

            // Фильтруем точки, у которых есть координаты
            const validPoints = orderedPoints.filter(point => point.Latitude !== null && point.Longitude !== null);

            if (validPoints.length === 0) {
                // Если нет точек для отображения на карте
                return;
            }

            // Создаем карту с центром на первой точке, но позже установим bounds
            const map = new ymaps.Map("map", {
                center: [validPoints[0].Latitude, validPoints[0].Longitude],
                zoom: 5
            });

            // Массив для координат маршрута
            const routeCoordinates = [];

            // Определение иконок для разных типов точек
            const icons = {
                "stationDeparture": "https://img.icons8.com/emoji/48/000000/train-emoji.png", // Иконка станции отправления
                "stationArrival": "https://img.icons8.com/emoji/48/000000/train-emoji.png",   // Иконка станции прибытия
                "hotel": "https://img.icons8.com/emoji/48/000000/hotel-emoji.png",            // Иконка отеля
                "city": "https://img.icons8.com/emoji/48/000000/cityscape.png"               // Иконка города (если понадобится)
            };

            // Создаем коллекцию для меток
            const geoObjects = new ymaps.GeoObjectCollection();

            validPoints.forEach((point) => {
                const coord = [point.Latitude, point.Longitude];
                routeCoordinates.push(coord);

                // Выбор иконки или стандартного пина
                let iconUrl = icons[point.Type] || "https://img.icons8.com/emoji/48/000000/round-pushpin.png";

                // Создание метки
                const placemark = new ymaps.Placemark(coord, {
                    balloonContent: `<b>${point.Name}</b>`
                }, {
                    iconLayout: 'default#image',
                    iconImageHref: iconUrl,
                    iconImageSize: [30, 30],
                    iconImageOffset: [-15, -30] // Центрирование иконки
                });

                geoObjects.add(placemark);
            });

            // Добавляем метки на карту
            map.geoObjects.add(geoObjects);

            // Создаем линию маршрута, если есть более одной точки
            if (routeCoordinates.length > 1) {
                const polyline = new ymaps.Polyline(routeCoordinates, {}, {
                    strokeColor: '#0000FF',
                    strokeWidth: 4,
                    strokeOpacity: 0.7
                });
                map.geoObjects.add(polyline);
            }

            // Создаем коллекцию всех геообъектов для определения границ
            const allGeoObjects = geoObjects.getGeoObjects();
            if (allGeoObjects.length > 0) {
                // Получаем границы, охватывающие все точки
                const bounds = ymaps.geoQuery(allGeoObjects).getBounds();

                // Добавляем полилинию к границам, если есть
                if (routeCoordinates.length > 1) {
                    bounds.extend(routeCoordinates);
                }

                // Устанавливаем границы на карту
                map.setBounds(bounds, {
                    checkZoomRange: true,
                    zoomMargin: 20
                }).then(function () {
                    // Дополнительные действия после установки границ, если необходимо
                }).catch(function (error) {
                    console.error("Ошибка при установке границ карты:", error);
                });
            }
        }
    </script>

    <style>
        table.table tbody td {
            transition: font-size 0.3s ease-in-out, transform 0.3s ease-in-out; /* Анимация */
        }
    
        table.table tbody td:hover {
            font-size: 1.1em; /* Увеличение шрифта */
            transform: scale(1.0); /* Легкое увеличение ячейки */
            cursor: pointer; /* Указатель меняется на "руку" */
        }
    </style>

}
